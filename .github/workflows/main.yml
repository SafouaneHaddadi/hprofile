name: Hprofile Actions
on: workflow_dispatch
#on: [push, workflow_dispatch]
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: actapp
  ECS_SERVICE: vproapp-actions-svc
  ECS_CLUSTER: vproapp-actions
  ECS_TASK_DEFINITION: aws-files-taskdeffile.json
  CONTAINER_NAMER: vproapp
   
jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test

      - name: Checkstyle
        run: mvn checkstyle:checkstyle

      - name: Set java 11
        uses: actions/setup-java@v3 #voir dans le Marketplace
        with:
          distribution: 'temurin'
          java-version: "11"

       # Setup sonar-scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7
       
      # Run sonar-scanner
      - name: SonarQube Scan
        run: sonar-scanner
           -Dsonar.host.url=${{ secrets.SONAR_URL }}
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
           -Dsonar.sources=src/
           -Dsonar.junit.reportsPath=target/surefire-reports/ 
           -Dsonar.jacoco.reportsPath=target/jacoco.exec 
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
     
      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL

   #2eme job : 
  BUILD_AND_PUBLISH:
    needs: Testing #ce job sera executé uniquement lorsque le premier sera terminé
    runs-on: ubuntu-latest
    steps:

      - name: Code checkout
        uses: actions/checkout@v4

      - name: Update application.properties files
      #toute ligne commencant par jdbc.username et qui se termine par n'importe quoi, remplace le par jdbc.username dont la valeur est égaleà la valeur mentionné dans le github secret
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties 
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties
 
      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: actapp 
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }} #run_number nous donne le build ID (l'objet github aura toutes les métadonnées au format json)
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./
        
  #3eme job : 

  Deploy:
    needs: BUILD_AND_PUBLISH #ce job sera executé uniquement lorsque le premier sera terminé
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def #id pour référencer la sortie de cette étape plus tard
        uses: aws-actions/amazon-ecs-render-task-definition@v1 #Utilise l’action officielle AWS
        with:
          task-definition: ${{env.ECS_TASK_DEFINITION}}
          container-name: ${{env.CONTAINER_NAME}}
          image: ${{ secrets.REGISTRY }}/${{env.ECR_REPOSITORY}}:${{ github.run_number}} #chemin complet de l'image docker. ex: 23456789.dkr.ecr.us-east-1.amazonaws.com/actapp:12

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
         task-definition: ${{ steps.task-def.outputs.task-definition }}
         service: ${{ env.ECS_SERVICE}}
         cluster: ${{ env.ECS_CLUSTER}}
         wait-for-service-stability: true #lorsque le service est stable ca signifie que tt va bien
         #rappel : le svc vérifie le LB, le LB vérifie l'état des conteneurs 

        